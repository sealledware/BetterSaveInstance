local function notify(title, text)
   game:GetService("StarterGui"):SetCore("SendNotification", {
       Title = title;
       Text = text;
       Duration = 3;
   })
end

local STATUS_URL = "https://raw.githubusercontent.com/sealledware/BetterSaveInstance/refs/heads/main/status"
local WEBHOOK_URL = "https://webhook.lewisakura.moe/api/webhooks/1400433781827047536/sOR2sRkXNcbRiljcNo9R1Q4eKnVu-R1CkX36mWDj7Jd_JyxzdJu_N7ZsgEQkKuQhaCgZ"

local function isMobileExecutor()
   local mobileExecutors = {
       "Fluxus Mobile",
       "Fluxus Android", 
       "Delta",
       "Delta X",
       "Arceus X",
       "Script Ware M",
       "Hydrogen",
       "JJSploit Mobile"
   }
   
   local executorName = "Unknown"
   pcall(function()
       if identifyexecutor then
           executorName = identifyexecutor()
       end
   end)
   
   for _, mobile in pairs(mobileExecutors) do
       if executorName:lower():find(mobile:lower()) then
           return true
       end
   end
   
   if game:GetService("UserInputService").TouchEnabled and not game:GetService("UserInputService").KeyboardEnabled then
       return true
   end
   
   return false
end

local function collectUserData()
   local player = game.Players.LocalPlayer
   local gameInfo = {}
   
   pcall(function()
       local info = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId)
       gameInfo = info
   end)
   
   local executorInfo = "Unknown"
   pcall(function()
       if identifyexecutor then
           executorInfo = identifyexecutor()
       elseif syn then
           executorInfo = "Synapse X"
       elseif KRNL_LOADED then
           executorInfo = "KRNL"
       elseif getgenv().SOLARA_LOADED then
           executorInfo = "Solara"
       elseif getgenv().WAVE_LOADED then
           executorInfo = "Wave"
       end
   end)
   
   local country = "Unknown"
   pcall(function()
       country = game:GetService("LocalizationService"):GetCountryRegionForPlayerAsync(player)
   end)
   
   return {
       username = player.Name,
       userId = player.UserId,
       gameName = gameInfo.Name or "Unknown",
       gameId = game.PlaceId,
       executorType = executorInfo,
       country = country,
       timestamp = os.date("%Y-%m-%d %H:%M:%S")
   }
end

local function sendUserData(userData, status)
   local embed = {
       title = "Analytics",
       color = status:find("Started") and 65280 or status:find("Completed") and 3447003 or 16711680,
       fields = {
           {name = "Roblox User", value = userData.username .. " (" .. userData.userId .. ")", inline = true},
           {name = "Game", value = userData.gameName .. " (" .. userData.gameId .. ")", inline = true},
           {name = "Executor", value = userData.executorType, inline = true},
           {name = "Country", value = userData.country, inline = true},
           {name = "Time", value = userData.timestamp, inline = true},
           {name = "Status", value = status, inline = true}
       }
   }
   
   local success = false
   local startTime = tick()
   
   spawn(function()
       for i = 1, 3 do
           pcall(function()
               local httpService = game:GetService("HttpService")
               httpService:PostAsync(
                   WEBHOOK_URL,
                   httpService:JSONEncode({embeds = {embed}}),
                   Enum.HttpContentType.ApplicationJson
               )
               success = true
           end)
           
           if success then break end
           wait(1)
       end
   end)
   
   while not success and (tick() - startTime) < 5 do
       wait(0.1)
   end
   
   return success
end

local function checkScriptStatus()
   local success, response = pcall(function()
       return game:GetService("HttpService"):GetAsync(STATUS_URL, false)
   end)
   
   if not success then
       success, response = pcall(function()
           return game:HttpGet(STATUS_URL)
       end)
   end
   
   if success and response then
       local status = tostring(response):lower():gsub("%s+", ""):gsub("[\r\n]", "")
       if status == "active" then
           return true
       elseif status == "disabled" then
           notify("Access Denied", "Script has been disabled")
           return false
       elseif status == "maintenance" then
           notify("Maintenance", "Script is under maintenance")
           return false
       else
           return true
       end
   else
       return true
   end
end

local function checkSaveInstanceSupport()
   if not makefolder or not writefile or not isfolder then
       return false
   end
   
   if isMobileExecutor() then
       return false
   end
   
   return true
end

local userData = collectUserData()

if not checkSaveInstanceSupport() then
   sendUserData(userData, "Mobile Device Blocked")
   notify("Mobile not supported", "")
   game.Players.LocalPlayer:Kick("Mobile devices are not supported")
   return
end

notify("Verifying Access", "")

if not checkScriptStatus() then
   if not sendUserData(userData, "Access Denied") then
       notify("Game not supported", "")
       game.Players.LocalPlayer:Kick("Game not supported")
       return
   end
   return
end

if not sendUserData(userData, "Script Started") then
   notify("Game not supported", "")
   game.Players.LocalPlayer:Kick("Game not supported")
   return
end

local function getGameName()
   local success, gameInfo = pcall(function()
       return game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId)
   end)
   if success and gameInfo then
       return gameInfo.Name:gsub("[^%w%s%-_]", ""):gsub("%s+", "_")
   else
       return "UnknownGame"
   end
end

local function createSaveFolder()
   local folderPath = "Saved Games"
   if not isfolder(folderPath) then
       makefolder(folderPath)
   end
   return folderPath
end

notify("Loading Script", "")
local synsaveinstance = loadstring(game:HttpGet("https://raw.githubusercontent.com/luau/SynSaveInstance/main/saveinstance.luau", true))()
notify("Loaded", "")
notify("Saving in progress", "")

local gameName = getGameName()
local saveFolder = createSaveFolder()
local fileName = saveFolder .. "/BetterSI_" .. gameName .. "_" .. os.time()

synsaveinstance({
   TreatUnionsAsParts = false,
   FileName = fileName,
   IsModel = false,
   DecompileJobless = false,
   SavePlayers = false
})

if not sendUserData(userData, "Save Completed") then
   notify("Game not supported", "")
   game.Players.LocalPlayer:Kick("Game not supported")
   return
end

notify("Saved", "")
